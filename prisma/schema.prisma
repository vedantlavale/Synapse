generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  contents      Content[]
  link          Link?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(uuid())
  accountId         String
  providerId        String
  userId            String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Content {
  id          String   @id @default(uuid())
  title       String
  description String?
  link        String
  type        String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  tags        ContentTag[]
}

model Link {
  id     String @id @default(uuid())
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Tag {
  id       String       @id @default(uuid())
  name     String       @unique
  contents ContentTag[]
}

model ContentTag {
  contentId String
  tagId     String

  content   Content @relation(fields: [contentId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([contentId, tagId])
}
